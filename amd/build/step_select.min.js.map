{"version":3,"file":"step_select.min.js","sources":["../src/step_select.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Workflow step select javascript.\n *\n * @module     tool_trigger/workflow\n * @class      Workflow\n * @copyright  2018 Matt Porritt <mattp@catalyst-au.net>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n * @since      3.4\n */\n\ndefine(\n  ['jquery', 'core/str', 'core/modal_factory', 'core/modal_events','core/templates', 'core/ajax', 'core/fragment',\n      'core/notification'],\n        function ($, Str, ModalFactory, ModalEvents, Templates, ajax, Fragment, Notification) {\n\n            /**\n             * Module level variables.\n             */\n            var StepSelect = {};\n            var contextid;\n            var modalObj;\n            var spinner = '<p class=\"text-center\">'\n                + '<i class=\"fa fa-spinner fa-pulse fa-2x fa-fw\"></i><span class=\"sr-only\">Loading...</span>'\n                + '</p>';\n\n            /**\n             * Retrieves the steps serialized to JSON in the stepsjson hidden form field.\n             */\n            function getParentFormSteps() {\n                var stepsjson = $('[name=stepjson]').val();\n                var steps = [];\n                if (stepsjson !== '') {\n                    steps = JSON.parse(stepsjson);\n                }\n                return steps;\n            }\n\n            /**\n             * Updates the steps stored in the hidden form field\n             *\n             * @param {object} steps the steps to store\n             */\n            function setCurrentFormSteps(steps) {\n                $('[name=stepjson]').val(JSON.stringify(steps));\n                // Set the flag field that indicates there was a change to the steps.\n                $('[name=isstepschanged]').val(1);\n            }\n\n            /**\n             * Updates the body of the modal window.\n             *\n             * @private\n             */\n            function updateModalBody() {\n                var formdata = {};\n                var params = {jsonformdata: JSON.stringify(formdata)};\n                modalObj.setBody(spinner);\n                modalObj.setBody(Fragment.loadFragment('tool_trigger', 'new_base_form', contextid, params));\n            }\n\n            /**\n             * Updates the table with the new step data.\n             *\n             * @param {array} stepData The steps to update in the table\n             */\n            function updateTable(stepData) {\n                // Format data for template.\n                // Filter out only the fields we want for each step, and make sure the \"steporder\" values\n                // are correct.\n                var rows = stepData.map(\n                    function(step, stepidx) {\n                        return {\n                            name: step.name,\n                            typedesc: step.typedesc,\n                            stepdesc: step.stepdesc,\n                            steporder: stepidx\n                        };\n                    }\n                );\n                var tableData = {'rows': rows};\n                Templates.render(\n                    'tool_trigger/workflow_steps',\n                    tableData\n                ).then(function(html) {\n                    $('#steps-table').html(html);\n                    setupTableHandlers();\n                }).fail(function() {\n                    Notification.exception({message: 'Error updating steps table'});\n                });\n            }\n\n            /**\n             * Updates Moodle form with selected information.\n             *\n             * @param {event} e the event emitted from the modal close.\n             * @private\n             */\n            function processModalForm(e) {\n                e.preventDefault(); // Stop modal from closing.\n\n                // Form data.\n                var $stepform = modalObj.getRoot().find('form');\n                // Use jQuery().serializeArray() to collect the values of all the form fields.\n                // Then convert from its array-of-objects output format into a single object.\n                var curstep = $stepform.serializeArray().reduce(\n                    function(finalobj, field) {\n                        // If field ends with [], the form el was an array.\n                        if (field.name.endsWith('[]')) {\n                            var fieldname = field.name.substring(0, field.name.length - 2);\n                            if (finalobj[fieldname] === undefined) {\n                                finalobj[fieldname] = [field.value];\n                            } else {\n                                finalobj[fieldname].push(field.value);\n                            }\n                        } else if (field.name !== 'sesskey'\n                                && !field.name.startsWith('_qf__')\n                                && !field.value.startsWith('_qf__')) {\n                            // Filter out the sesskey and formslib system fields.\n                            finalobj[field.name] = field.value;\n                        }\n\n                        return finalobj;\n                    },\n                    {}\n                );\n\n                // Add the description string for the step class and type, in order to make later rendering\n                // easier...\n                curstep['stepdesc'] = $('[name=stepclass] option:selected').text();\n                curstep['typedesc'] = $('[name=type] option:selected').text();\n\n                // Submit form via ajax to do server side validation.\n                ajax.call([{\n                    methodname: 'tool_trigger_validate_form',\n                    args: {\n                        stepclass: curstep['stepclass'],\n                        jsonformdata: JSON.stringify($stepform.serialize())\n                    },\n                }])[0].done(function() {\n\n                    // Validation succeeded! Update the parent form's hidden steps data, and update\n                    // the table.\n                    var steps = getParentFormSteps();\n\n                    if (curstep.steporder >= 0) {\n                        // If we were editing an existing step, swap it into place in the list.\n                        steps[curstep.steporder] = curstep;\n                    } else {\n                        // If we were creating a new step, add it to the end of the list.\n                        steps.push(curstep);\n                        curstep.steporder = steps.length - 1;\n                    }\n                    setCurrentFormSteps(steps); // Update steps in hidden form field\n                    updateTable(steps); // Update table in workflow form.\n                    modalObj.hide(); // Hide the modal.\n\n                }).fail(function() {\n\n                    // Validation failed! Don't close the modal, don't update anything on the parent\n                    // form.\n                    renderStepForm(curstep['type'], curstep['stepclass'], '', $stepform.serialize());\n                });\n            }\n\n            /**\n             * Updates the step list in the step modal edit form,\n             * with only the steps that correspond to the selected\n             * step type.\n             *\n             * @param {array} events Array of steps to update selection with.\n             */\n            function updateStepOptions(events) {\n\n                // First clear the existing options in the select element.\n                $('[name=stepclass]').empty().append($('<option>', {\n                    value: '',\n                    text : 'Choose...'\n                }));\n\n                // Update the select with applicable events.\n                $.each(events, function (i, event) {\n                    $('[name=stepclass]').append($('<option>', {\n                        value: event.class,\n                        text : event.name\n                    }));\n                });\n            }\n\n            /**\n             * Gets a list of filtered steps based on the selected step type.\n             * Triggers updating of the form step select element.\n             *\n             * @param {string} valfilter The filter area.\n             */\n            function getStepsOfType(valfilter) {\n                ajax.call([\n                    { methodname: 'tool_trigger_step_by_type', args: {'steptype': valfilter} },\n                ])[0].done(function(response) {\n                    updateStepOptions(response);\n                });\n            }\n\n            /**\n             * Get the event name that triggers this workflow.\n             *\n             * @return {string} The event name.\n             */\n            function getEventName() {\n                var eventname = $('[name=eventtomonitor]').val();\n\n                return eventname;\n            }\n\n            /**\n             * Render the correct form for a particular step (or type of step)\n             *\n             * @param {string} steptype The step category (triggers, filters, lookups)\n             * @param {string} stepclass The step class (\\tool_trigger\\steps\\triggers\\http_post_trigger_step, ...)\n             * @param {Object} formdefaults Default values to display in a new form\n             * @param {string} formsubmission Serialized (via jQuery().serialize()) form submission values to load\n             * into the form, when re-displaying a form that has failed validation.\n             * @param {int} steporder the order of this step.\n             */\n            function renderStepForm(steptype, stepclass, formdefaults, formsubmission, steporder) {\n                if (formdefaults === undefined) {\n                    formdefaults = '';\n                }\n\n                if (formsubmission === undefined) {\n                    formsubmission = '';\n                }\n\n                if (steporder === undefined) {\n                    steporder = 0;\n                }\n\n                modalObj.setBody(spinner);\n                modalObj.setBody(\n                    Fragment.loadFragment(\n                        'tool_trigger',\n                        'new_step_form',\n                        contextid,\n                        {\n                            'steptype' : steptype,\n                            'stepclass' : stepclass,\n                            'defaults': JSON.stringify(formdefaults),\n                            'ajaxformdata': formsubmission,\n                            'event': getEventName(),\n                            'existingsteps': JSON.stringify(getParentFormSteps()),\n                            'steporder': steporder,\n                        }\n                    )\n                );\n            }\n\n            /**\n             * Set the handlers for the Modal changing.\n             */\n            function setupModalChangeHandlers() {\n                // Add event listener for step type select onchange.\n                $('body').on('change', '[name=type]', function() {\n                    getStepsOfType(this.value);\n                });\n\n                // Add event listener for step  select onchange.\n                $('body').on('change', '[name=stepclass]', function() {\n                    var steptype = $('[name=type]').val();\n                    var stepclass = this.value;\n                    renderStepForm(steptype, stepclass, '', '', -1);\n                });\n            }\n\n            /**\n             * Swaps the position of 2 steps\n             *\n             * @param {object} steps the current steps\n             * @param {int} pos1 the first position to swap\n             * @param {int} pos2 the second position to swap\n             */\n            function swapSteps(steps, pos1, pos2){\n                // Milliseconds of animation.\n                var duration = 400;\n\n                // Swap the steps in the JSON list.\n                var step1 = steps[pos1];\n                var step2 = steps[pos2];\n                step1.steporder = pos2;\n                step2.steporder = pos2;\n                steps[pos1] = step2;\n                steps[pos2] = step1;\n\n                var $rows = $('tr.tool-trigger-step-table-row');\n                var $row1 = $rows.eq(pos1);\n                var $row2 = $rows.eq(pos2);\n                var row1height = $row1.height();\n                var row2height = $row2.height();\n                var row1color = $row1.find('th').css('background-color');\n                var row2color = $row2.find('th').css('background-color');\n\n                $([$row1, $row2]).each(function(idx, row){\n                    row[0].style.position = 'relative';\n                    row[0].style.top = '0';\n                    row[0].style.transition = 'top ' + duration + 'ms';\n                    row.find('th,td').each(function(idx, cell){\n                        cell.style.transition = 'background-color ' + duration + 'ms';\n                    });\n                });\n                window.setTimeout(function(){\n                    $row1[0].style.top = row2height + \"px\";\n                    $row1.find('td,th').each(function(idx, cell){\n                        cell.style.backgroundColor = row2color;\n                    });\n                    $row2[0].style.top = (-1 * row1height) + \"px\";\n                    $row2.find('td,th').each(function(idx, cell){\n                        cell.style.backgroundColor = row1color;\n                    });\n                });\n\n                // Also fade out the up/down buttons on the rows, because otherwise it can\n                // be visually confusing.\n                $row1.find('.tool-trigger-step-movedown').fadeTo(duration, 0.1);\n                // Replace the form once the animation is finished.\n                $row2.find('.tool-trigger-step-moveup')\n                  .fadeTo(duration, 0.1)\n                  .promise()\n                  .always(\n                    function(){\n                        setCurrentFormSteps(steps);\n                        updateTable(steps);\n                    }\n                  );\n\n            }\n\n            /**\n             * Display the action icons for the steps table, and set up\n             * handlers on them to make them clickable.\n             */\n            function setupTableHandlers() {\n                $('.tool-trigger-step-moveup')\n                // Don't show an up arrow for the top row of the table.\n                .slice(1)\n                .removeClass('tool-trigger-initial-hidden')\n                .on('click', function() {\n                    var steps = getParentFormSteps();\n\n                    // Already at the top. Can't move any higher!\n                    var steporder = $(this).data('steporder');\n                    if (steporder === 0) {\n                        return true;\n                    }\n\n                    swapSteps(steps, steporder - 1 , steporder);\n\n                    return true;\n                });\n\n                $('.tool-trigger-step-movedown')\n                // Don't show a down arrow for the bottom row of the table.\n                .slice(0, -1)\n                .removeClass('tool-trigger-initial-hidden')\n                .on('click', function() {\n                    var steps = getParentFormSteps();\n\n                    // Already at the end. Can't move any further!\n                    var steporder = $(this).data('steporder');\n                    if (steporder >= steps.length - 1) {\n                        return true;\n                    }\n\n                    swapSteps(steps, steporder, steporder + 1);\n\n                    return true;\n                });\n\n                $('.tool-trigger-step-edit')\n                .removeClass('tool-trigger-initial-hidden')\n                .on('click', function() {\n\n                    modalObj.setBody(spinner);\n                    modalObj.show();\n                    var steps = getParentFormSteps();\n                    var steporder = $(this).data('steporder');\n                    var step = steps[steporder];\n\n                    renderStepForm(\n                        step['type'],\n                        step['stepclass'],\n                        step,\n                        undefined,\n                        steporder\n                    );\n                });\n\n                $('.tool-trigger-step-delete')\n                .removeClass('tool-trigger-initial-hidden')\n                .on('click', function() {\n                    var steps = getParentFormSteps();\n\n                    // Remove it from the array.\n                    var steporder = $(this).data('steporder');\n                    steps.splice(steporder, 1);\n                    // Adjust the steporder of all subsequent steps.\n                    if (steporder <= steps.length) {\n                        steps.slice(steporder).forEach(\n                            function(step) {\n                                step.steporder = step.steporder - 1;\n                            }\n                        );\n                    }\n\n                    setCurrentFormSteps(steps);\n                    $(this).closest('tr').fadeOut(\n                        function(){\n                            updateTable(steps);\n                        }\n                    );\n\n                    return true;\n                });\n            }\n\n            /**\n             * Initialise the class.\n             *\n             * @param {int} context the context id for the function from PHP.\n             * @public\n             */\n            StepSelect.init = function(context) {\n                // Save the context ID in a closure variable.\n                contextid = context;\n\n                // Get the Title String.\n                Str.get_string('modaltitle', 'tool_trigger').then(function(title) {\n                    // Create the Modal.\n                    ModalFactory.create({\n                        type: ModalFactory.types.SAVE_CANCEL,\n                        title: title,\n                        body: spinner,\n                        large: true\n                    }, $('#id_stepmodalbutton'))\n                    .done(function(modal) {\n                        modalObj = modal;\n                        modalObj.getRoot().on(ModalEvents.save, processModalForm);\n                        modalObj.getRoot().on(ModalEvents.hidden, updateModalBody);\n                        setupModalChangeHandlers();\n                        updateModalBody();\n                    });\n                });\n\n                // Setup click handlers on the edit/delete icons in the steps table.\n                setupTableHandlers();\n            };\n\n            return StepSelect;\n        });"],"names":["define","$","Str","ModalFactory","ModalEvents","Templates","ajax","Fragment","Notification","contextid","modalObj","StepSelect","spinner","getParentFormSteps","stepsjson","val","steps","JSON","parse","setCurrentFormSteps","stringify","updateModalBody","params","jsonformdata","setBody","loadFragment","updateTable","stepData","tableData","map","step","stepidx","name","typedesc","stepdesc","steporder","render","then","html","setupTableHandlers","fail","exception","message","processModalForm","e","preventDefault","$stepform","getRoot","find","curstep","serializeArray","reduce","finalobj","field","endsWith","fieldname","substring","length","undefined","value","push","startsWith","text","call","methodname","args","stepclass","serialize","done","hide","renderStepForm","getStepsOfType","valfilter","response","events","empty","append","each","i","event","class","steptype","formdefaults","formsubmission","swapSteps","pos1","pos2","step1","step2","$rows","$row1","eq","$row2","row1height","height","row2height","row1color","css","row2color","idx","row","style","position","top","transition","cell","window","setTimeout","backgroundColor","fadeTo","promise","always","slice","removeClass","on","this","data","show","splice","forEach","closest","fadeOut","init","context","get_string","title","create","type","types","SAVE_CANCEL","body","large","modal","save","hidden"],"mappings":"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"}